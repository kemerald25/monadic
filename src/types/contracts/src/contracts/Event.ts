/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EventInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anchorPostEventData"
      | "attendanceRecorded"
      | "createSponsorshipTier"
      | "createTicketTier"
      | "endTime"
      | "factory"
      | "getPollCount"
      | "getPollResults"
      | "getSponsorshipTierCount"
      | "getTicketTierCount"
      | "hasVoted"
      | "maxAttendees"
      | "mintSponsorship"
      | "mintTicket"
      | "name"
      | "organizer"
      | "owner"
      | "polls"
      | "recordAttendance"
      | "renounceOwnership"
      | "sponsorshipNFT"
      | "sponsorshipTiers"
      | "startTime"
      | "submitPoll"
      | "symbol"
      | "ticketNFT"
      | "ticketTiers"
      | "transferOwnership"
      | "vote"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttendanceRecorded"
      | "OwnershipTransferred"
      | "PollCreated"
      | "PostEventDataAnchored"
      | "SponsorshipMinted"
      | "SponsorshipTierCreated"
      | "TicketMinted"
      | "TicketTierCreated"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "anchorPostEventData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attendanceRecorded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSponsorshipTier",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTicketTier",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPollCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPollResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSponsorshipTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketTierCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAttendees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSponsorship",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTicket",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "organizer", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "recordAttendance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorshipNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorshipTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitPoll",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "anchorPostEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attendanceRecorded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSponsorshipTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTicketTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPollCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPollResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSponsorshipTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketTierCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAttendees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSponsorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorshipNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorshipTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AttendanceRecordedEvent {
  export type InputTuple = [ticketId: BigNumberish, attendee: AddressLike];
  export type OutputTuple = [ticketId: bigint, attendee: string];
  export interface OutputObject {
    ticketId: bigint;
    attendee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollCreatedEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    questionHash: string,
    options: string[]
  ];
  export type OutputTuple = [
    pollId: bigint,
    questionHash: string,
    options: string[]
  ];
  export interface OutputObject {
    pollId: bigint;
    questionHash: string;
    options: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostEventDataAnchoredEvent {
  export type InputTuple = [dataHash: BytesLike];
  export type OutputTuple = [dataHash: string];
  export interface OutputObject {
    dataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SponsorshipMintedEvent {
  export type InputTuple = [
    levelId: BigNumberish,
    sponsor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [levelId: bigint, sponsor: string, amount: bigint];
  export interface OutputObject {
    levelId: bigint;
    sponsor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SponsorshipTierCreatedEvent {
  export type InputTuple = [
    levelId: BigNumberish,
    level: string,
    price: BigNumberish
  ];
  export type OutputTuple = [levelId: bigint, level: string, price: bigint];
  export interface OutputObject {
    levelId: bigint;
    level: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [tierId: bigint, to: string, tokenId: bigint];
  export interface OutputObject {
    tierId: bigint;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketTierCreatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    name: string,
    price: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    tierId: bigint,
    name: string,
    price: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    tierId: bigint;
    name: string;
    price: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    voter: AddressLike,
    optionId: BigNumberish
  ];
  export type OutputTuple = [pollId: bigint, voter: string, optionId: bigint];
  export interface OutputObject {
    pollId: bigint;
    voter: string;
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Event extends BaseContract {
  connect(runner?: ContractRunner | null): Event;
  waitForDeployment(): Promise<this>;

  interface: EventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anchorPostEventData: TypedContractMethod<
    [dataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  attendanceRecorded: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  createSponsorshipTier: TypedContractMethod<
    [
      level: string,
      price: BigNumberish,
      metadataURI: string,
      supply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createTicketTier: TypedContractMethod<
    [
      _name: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endTime: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getPollCount: TypedContractMethod<[], [bigint], "view">;

  getPollResults: TypedContractMethod<
    [pollId: BigNumberish],
    [
      [string[], bigint[], bigint] & {
        options: string[];
        votes: bigint[];
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  getSponsorshipTierCount: TypedContractMethod<[], [bigint], "view">;

  getTicketTierCount: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  maxAttendees: TypedContractMethod<[], [bigint], "view">;

  mintSponsorship: TypedContractMethod<
    [levelId: BigNumberish, sponsorAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  mintTicket: TypedContractMethod<
    [tierId: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  organizer: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  polls: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        questionHash: string;
        totalVotes: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  recordAttendance: TypedContractMethod<
    [ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sponsorshipNFT: TypedContractMethod<[], [string], "view">;

  sponsorshipTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint, boolean] & {
        level: string;
        price: bigint;
        metadataURI: string;
        supply: bigint;
        sold: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  submitPoll: TypedContractMethod<
    [questionHash: string, options: string[]],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  ticketNFT: TypedContractMethod<[], [string], "view">;

  ticketTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        price: bigint;
        supply: bigint;
        sold: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [pollId: BigNumberish, optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anchorPostEventData"
  ): TypedContractMethod<[dataHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "attendanceRecorded"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "createSponsorshipTier"
  ): TypedContractMethod<
    [
      level: string,
      price: BigNumberish,
      metadataURI: string,
      supply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTicketTier"
  ): TypedContractMethod<
    [
      _name: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPollCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPollResults"
  ): TypedContractMethod<
    [pollId: BigNumberish],
    [
      [string[], bigint[], bigint] & {
        options: string[];
        votes: bigint[];
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSponsorshipTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTicketTierCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxAttendees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintSponsorship"
  ): TypedContractMethod<
    [levelId: BigNumberish, sponsorAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintTicket"
  ): TypedContractMethod<
    [tierId: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "organizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "polls"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        questionHash: string;
        totalVotes: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordAttendance"
  ): TypedContractMethod<[ticketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sponsorshipNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sponsorshipTiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint, boolean] & {
        level: string;
        price: bigint;
        metadataURI: string;
        supply: bigint;
        sold: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitPoll"
  ): TypedContractMethod<
    [questionHash: string, options: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ticketNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ticketTiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        name: string;
        price: bigint;
        supply: bigint;
        sold: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [pollId: BigNumberish, optionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AttendanceRecorded"
  ): TypedContractEvent<
    AttendanceRecordedEvent.InputTuple,
    AttendanceRecordedEvent.OutputTuple,
    AttendanceRecordedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PostEventDataAnchored"
  ): TypedContractEvent<
    PostEventDataAnchoredEvent.InputTuple,
    PostEventDataAnchoredEvent.OutputTuple,
    PostEventDataAnchoredEvent.OutputObject
  >;
  getEvent(
    key: "SponsorshipMinted"
  ): TypedContractEvent<
    SponsorshipMintedEvent.InputTuple,
    SponsorshipMintedEvent.OutputTuple,
    SponsorshipMintedEvent.OutputObject
  >;
  getEvent(
    key: "SponsorshipTierCreated"
  ): TypedContractEvent<
    SponsorshipTierCreatedEvent.InputTuple,
    SponsorshipTierCreatedEvent.OutputTuple,
    SponsorshipTierCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;
  getEvent(
    key: "TicketTierCreated"
  ): TypedContractEvent<
    TicketTierCreatedEvent.InputTuple,
    TicketTierCreatedEvent.OutputTuple,
    TicketTierCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "AttendanceRecorded(uint256,address)": TypedContractEvent<
      AttendanceRecordedEvent.InputTuple,
      AttendanceRecordedEvent.OutputTuple,
      AttendanceRecordedEvent.OutputObject
    >;
    AttendanceRecorded: TypedContractEvent<
      AttendanceRecordedEvent.InputTuple,
      AttendanceRecordedEvent.OutputTuple,
      AttendanceRecordedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PollCreated(uint256,string,string[])": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "PostEventDataAnchored(bytes32)": TypedContractEvent<
      PostEventDataAnchoredEvent.InputTuple,
      PostEventDataAnchoredEvent.OutputTuple,
      PostEventDataAnchoredEvent.OutputObject
    >;
    PostEventDataAnchored: TypedContractEvent<
      PostEventDataAnchoredEvent.InputTuple,
      PostEventDataAnchoredEvent.OutputTuple,
      PostEventDataAnchoredEvent.OutputObject
    >;

    "SponsorshipMinted(uint256,address,uint256)": TypedContractEvent<
      SponsorshipMintedEvent.InputTuple,
      SponsorshipMintedEvent.OutputTuple,
      SponsorshipMintedEvent.OutputObject
    >;
    SponsorshipMinted: TypedContractEvent<
      SponsorshipMintedEvent.InputTuple,
      SponsorshipMintedEvent.OutputTuple,
      SponsorshipMintedEvent.OutputObject
    >;

    "SponsorshipTierCreated(uint256,string,uint256)": TypedContractEvent<
      SponsorshipTierCreatedEvent.InputTuple,
      SponsorshipTierCreatedEvent.OutputTuple,
      SponsorshipTierCreatedEvent.OutputObject
    >;
    SponsorshipTierCreated: TypedContractEvent<
      SponsorshipTierCreatedEvent.InputTuple,
      SponsorshipTierCreatedEvent.OutputTuple,
      SponsorshipTierCreatedEvent.OutputObject
    >;

    "TicketMinted(uint256,address,uint256)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;

    "TicketTierCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      TicketTierCreatedEvent.InputTuple,
      TicketTierCreatedEvent.OutputTuple,
      TicketTierCreatedEvent.OutputObject
    >;
    TicketTierCreated: TypedContractEvent<
      TicketTierCreatedEvent.InputTuple,
      TicketTierCreatedEvent.OutputTuple,
      TicketTierCreatedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
